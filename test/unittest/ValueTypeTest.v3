// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("types:", _, ValueTypeTester.new, _);

def X = [
	T("prims", test_prims),
	T("nullable", test_nullable),
	T("combine", test_combine),
	T("funcs1", test_funcs1),
	T("funcs2", test_funcs2),
	T("funcs3", test_funcs3),
	T("nullfuncs1", test_nullfuncs1),
	T("nullfuncs2", test_nullfuncs2),
	T("super_chainS", test_super_chainS),
	T("super_chainA", test_super_chainA),
	T("super_chainF", test_super_chainF),
	T("func_var0", test_func_var0),
	T("func_var1", test_func_var1),
	T("func_var2", test_func_var2),
	T("rec_func1", test_rec_func1),
	T("rec_func2", test_rec_func2),
	T("rec_func3", test_rec_func3),
	T("array1", test_array1),
	T("array_sub1", test_array_sub1),
	T("struct1", test_struct1),
	T("struct_sub1", test_struct_sub1),
	T("struct_sub2", test_struct_sub2),
	T("ref0", test_ref0),
	T("ref1", test_ref1),
	T("ref2", test_ref2),
	T("extref_null1", test_extref_null1),
	T("packed1", test_packed1),
	T("packed2", test_packed2),
	T("i31ref", test_i31ref),
	T("exnref", test_exnref),
	T("data", test_data),
	T("array", test_array),
	T("struct", test_struct),
	()
];

def NO_SUPERS = ValueTypes.NO_HEAPTYPES;
def newSig = SigDecl.new(true, NO_SUPERS, _, _);
def newStruct = StructDecl.new(true, NO_SUPERS, _);
def newArray = ArrayDecl.new(true, NO_SUPERS, _);
def finalSig = SigDecl.new(true, _, _, _);
def finalStruct = StructDecl.new(true, _, _);
def finalArray = ArrayDecl.new(true, _, _);
def VtRefT = ValueType.Ref(false, _);
def VtRefN = ValueType.Ref(true, _);

class ValueTypeTester(t: Tester) {
	var cache: HeapTypeCache;

	def newCanonSig(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {
		var sig = newSig(params, results);
		return SigDecl.!(canon().doOne(sig));
	}
	def newCanonStruct(field_types: Array<StorageType>) -> StructDecl {
		var st = newStruct(field_types);
		return StructDecl.!(canon().doOne(st));
	}
	def newCanonArray(elem_types: Array<StorageType>) -> ArrayDecl {
		var at = newArray(elem_types);
		return ArrayDecl.!(canon().doOne(at));
	}
	def canon() -> HeapTypeCache {
		if (cache == null) cache = HeapTypeCache.new();
		return cache;
	}
	def assert_maybe(assignable: bool, from: ValueType, to: ValueType) {
		if (assignable != ValueTypes.isAssignable(from, to)) {
			return t.fail3("expected assignable=%z from=%q to=%q", assignable, from.render, to.render);
		}
	}
	def assert_assignable(from: ValueType, to: ValueType) {
		if (!ValueTypes.isAssignable(from, to)) {
			return t.fail2("expected assignable from=%q to=%q", from.render, to.render);
		}
	}
	def assert_compare(expected: TypeEquiv, from: ValueType, to: ValueType) {
		var eq = TypeRelation.compare(from, to);
		if (eq != expected) {
			var msg = StringBuilder.new()
				.put2("expected %s, got %s ", expected.name, eq.name)
				.put2("for from=%q to=%q", from.render, to.render)
				.extract();
			return t.fail(msg);
		}
	}
	def assert_equal(from: ValueType, to: ValueType) {
		assert_assignable(from, to);
		assert_compare(TypeEquiv.EQUAL, from, to);
		assert_compare(TypeEquiv.EQUAL, to, from);
	}
	def assert_subtype(from: ValueType, to: ValueType) {
		assert_assignable(from, to);
		var eq = TypeRelation.compare(from, to);
		if (eq != TypeEquiv.SUB) {
			return t.fail(Strings.format3("expected subtype from=%q to=%q, got %s", from.render, to.render, eq.name));
		}
		eq = TypeRelation.compare(to, from);
		if (eq != TypeEquiv.SUPER) {
			return t.fail(Strings.format3("expected supertype from=%q to=%q, got %s", from.render, to.render, eq.name));
		}
	}
	def assert_unrelated(from: ValueType, to: ValueType) {
		assert_maybe(false, from, to);
		assert_maybe(false, to, from);
		assert_compare(TypeEquiv.UNRELATED, from, to);
		assert_compare(TypeEquiv.UNRELATED, to, from);
	}
	def assert_eq(expected: TypeEquiv, got: TypeEquiv) {
		if (expected != got) {
			return t.fail2("expected %s, got %s", expected.name, got.name);
		}
	}
}

def unpackedT = StorageType(_, Packedness.UNPACKED, _);

def PRIMS = [ValueType.I32, ValueType.I64, ValueType.F32, ValueType.F64, ValueType.V128];
def TERMS = [ValueType.I32, ValueType.I64, ValueType.F32, ValueType.F64, ValueType.V128,
	ValueTypes.ANYREF, ValueTypes.FUNCREF, ValueTypes.EXTERNREF];

def func_x_v(t: ValueType) -> ValueType.Ref {
	return VtRefT(HeapType.Func(newSig([t], SigCache.arr_v)));
}

def func_v_x(t: ValueType) -> ValueType.Ref {
	return VtRefT(HeapType.Func(newSig(SigCache.arr_v, [t])));
}

def nullfunc_x_v(t: ValueType) -> ValueType.Ref {
	return VtRefN(HeapType.Func(newSig([t], SigCache.arr_v)));
}

def nullfunc_v_x(t: ValueType) -> ValueType.Ref {
	return VtRefN(HeapType.Func(newSig(SigCache.arr_v, [t])));
}

def test_prims(t: ValueTypeTester) {
	for (i < PRIMS.length) {
		for (j < PRIMS.length) {
			t.t.assertz(i == j, ValueTypes.isAssignable(PRIMS[i], PRIMS[j]));
		}
	}
}

def test_nullable(t: ValueTypeTester) {
	def m = TypeRelation.compareNullable;

	t.assert_eq(TypeEquiv.EQUAL,	m(false, false));
	t.assert_eq(TypeEquiv.SUPER,	m(true, false));
	t.assert_eq(TypeEquiv.SUB,	m(false, true));
	t.assert_eq(TypeEquiv.EQUAL,	m(true, true));
}

def test_combine(t: ValueTypeTester) {
	def m = TypeRelation.combineEq;

	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.UNRELATED, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.UNRELATED, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.UNRELATED, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.UNRELATED, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.SUPER, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.SUPER,		m(TypeEquiv.SUPER, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.SUPER,		m(TypeEquiv.SUPER, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.SUPER, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.EQUAL, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.SUPER,		m(TypeEquiv.EQUAL, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.EQUAL,		m(TypeEquiv.EQUAL, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.SUB,		m(TypeEquiv.EQUAL, TypeEquiv.SUB));

	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.SUB, TypeEquiv.UNRELATED));
	t.assert_eq(TypeEquiv.UNRELATED,	m(TypeEquiv.SUB, TypeEquiv.SUPER));
	t.assert_eq(TypeEquiv.SUB,		m(TypeEquiv.SUB, TypeEquiv.EQUAL));
	t.assert_eq(TypeEquiv.SUB,		m(TypeEquiv.SUB, TypeEquiv.SUB));
}

def test_funcs1(t: ValueTypeTester) {
	var funcs = Arrays.map(PRIMS, func_x_v);
	for (i < funcs.length) {
		for (j < funcs.length) {
			t.assert_maybe(i == j, funcs[i], funcs[j]);
		}
	}
	funcs = Arrays.map(PRIMS, func_v_x);
	for (i < funcs.length) {
		for (j < funcs.length) {
			t.assert_maybe(i == j, funcs[i], funcs[j]);
		}
	}
}

def test_funcs2(t: ValueTypeTester) {
	for (x in TERMS) {
		for (f in [func_x_v, func_v_x]) {
			var fi = f(x);
			t.assert_subtype(fi, ValueTypes.FUNCREF);
			t.assert_unrelated(fi, ValueTypes.EXTERNREF);
			t.assert_maybe(false, ValueTypes.FUNCREF, fi);
			t.assert_unrelated(ValueTypes.EXTERNREF, fi);
		}
	}
}

def test_funcs3(t: ValueTypeTester) {
	for (x in TERMS) {
		var fi = func_x_v(x);
		var ok = x == ValueTypes.FUNCREF;
		t.assert_maybe(ok, fi, x);
		t.assert_maybe(false, x, fi);
	}
}

def test_nullfuncs1(t: ValueTypeTester) {
	var funcs = Arrays.map(PRIMS, func_x_v);
	for (i < funcs.length) {
		for (j < funcs.length) {
			var nj = VtRefN(funcs[j].heap);
			t.assert_maybe(i == j, funcs[i], nj);
		}
	}
	funcs = Arrays.map(PRIMS, func_v_x);
	for (i < funcs.length) {
		for (j < funcs.length) {
			var nj = VtRefN(funcs[j].heap);
			t.assert_maybe(i == j, funcs[i], nj);
		}
	}
}

def test_nullfuncs2(t: ValueTypeTester) {
	var funcs = Arrays.map(PRIMS, nullfunc_x_v);
	for (i < funcs.length) {
		for (j < funcs.length) {
			t.assert_maybe(i == j, funcs[i], funcs[j]);
		}
	}
	funcs = Arrays.map(PRIMS, nullfunc_v_x);
	for (i < funcs.length) {
		for (j < funcs.length) {
			t.assert_maybe(i == j, funcs[i], funcs[j]);
		}
	}
}

def check_super_chain<D, P>(t: ValueTypeTester, newDecl: (Array<HeapType>, P) -> D, newHT: D -> HeapType, param: P) {
	var m = Module.new("ValueTypeTest.v3");
	var s1 = newDecl(NO_SUPERS, param);
	var s2 = newDecl([newHT(s1)], param);
	var s3 = newDecl([newHT(s2)], param);
	var s4 = newDecl([newHT(s3)], param);
	m.addDecl(Decl.!(s1));
	m.addDecl(Decl.!(s2));
	m.addDecl(Decl.!(s3));
	m.addDecl(Decl.!(s4));

	var array = [s1, s2, s3, s4];
	for (i < array.length) {
		var ft = VtRefT(newHT(array[i]));
		for (j < array.length) {
			var tt = VtRefT(newHT(array[j]));
			if (i < j) t.assert_subtype(tt, ft);
			else if (i == j) t.assert_equal(tt, ft);
		}
	}
}

def test_super_chainS(t: ValueTypeTester) {
	var no_fields = Array<StorageType>.new(0);
	check_super_chain(t, finalStruct, HeapType.Struct, no_fields);
}

def test_super_chainA(t: ValueTypeTester) {
	var no_fields = Array<StorageType>.new(0);
	check_super_chain(t, finalArray, HeapType.Array, no_fields);
}

def newSigDecl2(supertypes: Array<HeapType>, pr: (Array<ValueType>, Array<ValueType>)) -> SigDecl {
	return finalSig(supertypes, pr.0, pr.1); // just unpacks tuple to two args
}

def test_super_chainF(t: ValueTypeTester) {
	var no_params = (SigCache.arr_v, SigCache.arr_v);
	check_super_chain(t, newSigDecl2, HeapType.Func, no_params);
}

def check_func_variance(t: ValueTypeTester, a: ValueType, b: ValueType) {
	{ // return variance
		var sig_b = newSig(SigCache.arr_v, [b]);
		var f_b = VtRefN(HeapType.Func(sig_b));

		if (ValueTypes.isAssignable(a, b)) {
			var sig_a = finalSig([HeapType.Func(sig_b)], SigCache.arr_v, [a]);
			t.assert_subtype(VtRefT(HeapType.Func(sig_a)), f_b);
			t.assert_subtype(VtRefN(HeapType.Func(sig_a)), f_b);
		}

		var f_a = func_v_x(a);
		t.assert_unrelated(f_a, f_b);
	}
	{ // param variance
		var sig_a = newSig([a], SigCache.arr_v);
		var f_a = VtRefN(HeapType.Func(sig_a));

		if (ValueTypes.isAssignable(a, b)) {
			var sig_b = finalSig([HeapType.Func(sig_a)], [b], SigCache.arr_v);
			t.assert_subtype(VtRefT(HeapType.Func(sig_b)), f_a);
			t.assert_subtype(VtRefN(HeapType.Func(sig_b)), f_a);
		}
		var f_b = func_x_v(b);
		t.assert_unrelated(f_a, f_b);
	}
}

def test_func_var0(t: ValueTypeTester) {
	for (a in TERMS) {
		for (b in TERMS) {
			if (a == b) continue;
			check_func_variance(t, a, b);
		}
	}
}

def test_func_var1(t: ValueTypeTester) {
	var T = [ValueTypes.EXTERNREF, ValueTypes.FUNCREF];
	for (a in T) {
		for (b in T) {
			if (a == b) continue;
			check_func_variance(t, a, b);
		}
	}
}

def test_func_var2(t: ValueTypeTester) {
	var f = func_x_v(ValueType.I32), nf = nullfunc_x_v(ValueType.I32);
	check_func_variance(t, f, nf);

}

def test_rec_func1(t: ValueTypeTester) {
	var m = Module.new("ValueTypeTest.v3");
	for (p in PRIMS) {
		var sig1 = newSig([p], [VtRefT(HeapType.FwRef(0))]);
		m.addDecl(sig1);
		t.canon().doGroup(m.heaptypes, 0, 1);
		sig1 = SigDecl.!(m.heaptypes[0]);

		t.assert_equal(VtRefT(HeapType.Func(sig1)), VtRefT(HeapType.Func(sig1)));
		t.assert_subtype(VtRefT(HeapType.Func(sig1)), VtRefN(HeapType.Func(sig1)));

		var sig2 = newSig([p], [VtRefT(HeapType.FwRef(0))]);
		m.addDecl(sig2);
		t.canon().doGroup(m.heaptypes, 1, 1);
		sig2 = SigDecl.!(m.heaptypes[1]);

		t.assert_equal(VtRefT(HeapType.Func(sig1)), VtRefT(HeapType.Func(sig2)));
	}
}

def test_rec_func2(t: ValueTypeTester) {
	var m = Module.new("ValueTypeTest.v3");
	for (p in PRIMS) {
		var sig1 = newSig([VtRefT(HeapType.FwRef(0))], [p]);
		m.addDecl(sig1);
		t.canon().doGroup(m.heaptypes, 0, 1);
		sig1 = SigDecl.!(m.heaptypes[0]);

		var sig2 = newSig([p], [VtRefT(HeapType.FwRef(0))]);
		m.addDecl(sig2);
		t.canon().doGroup(m.heaptypes, 1, 1);
		sig2 = SigDecl.!(m.heaptypes[1]);

		t.assert_unrelated(VtRefT(HeapType.Func(sig1)), VtRefT(HeapType.Func(sig2)));
	}
}

def test_rec_func3(t: ValueTypeTester) {
	var sigs = [
		newSig([ValueType.I32], [ValueType.I32]),
		newSig([ValueType.I32], [ValueType.I32])
	];
	var fts = [
		VtRefT(HeapType.Func(sigs[0])),
		VtRefT(HeapType.Func(sigs[1]))
	];
	sigs[0].params[0] = fts[1];
	sigs[1].results[0] = fts[0];

	for (ti in fts) {
		for (tj in fts) {
			if (ti == tj) t.assert_equal(ti, tj);
			else t.assert_unrelated(ti, tj);
		}
	}
}

def test_array1(t: ValueTypeTester) {
	for (ti in TERMS) {
		for (mut in [true, false]) {
			var decl = newArray([unpackedT(ti, mut)]);
			var rat = VtRefT(HeapType.Array(decl));
			var rnat = VtRefN(HeapType.Array(decl));
			t.assert_equal(rat, rat);
			t.assert_subtype(rat, rnat);
			t.assert_equal(rnat, rnat);
			if (ti == ValueTypes.ANYREF) {
				t.assert_subtype(rat, ti);
				t.assert_subtype(rnat, ti);
			} else {
				t.assert_unrelated(ti, rat);
				t.assert_unrelated(ti, rnat);
			}
		}
	}
}

def test_array_sub1(t: ValueTypeTester) {
	for (mut in [false, true]) {
		var ra = finalArray(NO_SUPERS, [unpackedT(ValueTypes.ANYREF, mut)]);
		ra.heaptype_index = 5;
		var fa = if(mut,
			finalArray(NO_SUPERS, [unpackedT(ValueTypes.FUNCREF, mut)]),
			finalArray([HeapType.Array(ra)], [unpackedT(ValueTypes.FUNCREF, mut)]));
		fa.heaptype_index = 6;
		for (nullable in [false, true]) {
			var rat = ValueType.Ref(nullable, HeapType.Array(ra));
			var fat = ValueType.Ref(nullable, HeapType.Array(fa));
			t.assert_equal(rat, rat);
			t.assert_equal(fat, fat);
			if (mut) t.assert_unrelated(rat, fat);
			else t.assert_subtype(fat, rat);
		}
	}
}

def test_struct1(t: ValueTypeTester) {
	for (ti in TERMS) {
		for (mut in [true, false]) {
			var decl = newStruct([unpackedT(ti, mut)]);
			var rst = VtRefT(HeapType.Struct(decl));
			var rnst = VtRefN(HeapType.Struct(decl));
			t.assert_equal(rst, rst);
			t.assert_subtype(rst, rnst);
			t.assert_equal(rnst, rnst);
			if (ti == ValueTypes.ANYREF) {
				t.assert_subtype(rst, ti);
				t.assert_subtype(rnst, ti);
			} else {
				t.assert_unrelated(ti, rst);
				t.assert_unrelated(ti, rnst);
			}
		}
	}
}

def test_struct_sub1(t: ValueTypeTester) {
	for (mut in [true, false]) {
		var ra = finalStruct(NO_SUPERS, [unpackedT(ValueTypes.ANYREF, mut)]);
		var fa = if(mut,
			finalStruct(NO_SUPERS, [unpackedT(ValueTypes.FUNCREF, mut)]),
			finalStruct([HeapType.Struct(ra)], [unpackedT(ValueTypes.FUNCREF, mut)]));
		for (nullable in [true, false]) {
			var rat = ValueType.Ref(nullable, HeapType.Struct(ra));
			var fat = ValueType.Ref(nullable, HeapType.Struct(fa));
			t.assert_equal(rat, rat);
			t.assert_equal(fat, fat);
			if (mut) t.assert_unrelated(rat, fat);
			else t.assert_subtype(fat, rat);
		}
	}
}

def test_struct_sub2(t: ValueTypeTester) {
	for (mut in [false, true]) {
		for (ti in TERMS) {
			for (tj in PRIMS) {
				var a = finalStruct(NO_SUPERS, [unpackedT(ti, mut)]);
				var b = finalStruct([HeapType.Struct(a)], [unpackedT(ti, mut), unpackedT(tj, mut)]);
				var sa = VtRefT(HeapType.Struct(a));
				var sb = VtRefT(HeapType.Struct(b));
				t.assert_subtype(sb, sa);
			}
		}
	}
}

def test_ref0(t: ValueTypeTester) {
	t.assert_subtype(ValueTypes.NULLFUNCREF, ValueTypes.FUNCREF);
	t.assert_subtype(ValueTypes.NULLEXTERNREF, ValueTypes.EXTERNREF);
	t.assert_subtype(ValueTypes.NULLREF, ValueTypes.ANYREF);
	
	t.assert_unrelated(ValueTypes.FUNCREF, ValueTypes.ANYREF);
	t.assert_unrelated(ValueTypes.EXTERNREF, ValueTypes.ANYREF);
	t.assert_unrelated(ValueTypes.EXTERNREF, ValueTypes.FUNCREF);
}

def test_ref1(t: ValueTypeTester) {
	for (nullable in [true, false]) {
		var T = [
			ValueType.Ref(nullable, HeapType.Array(newArray([unpackedT(ValueType.I32, false)]))),
			ValueType.Ref(nullable, HeapType.Struct(newStruct([unpackedT(ValueType.I32, false)])))
		];
		for (ti in T) {
			t.assert_subtype(ti, ValueTypes.ANYREF);
			t.assert_maybe(nullable, ValueTypes.NULLREF, ti);
			t.assert_unrelated(ti, ValueTypes.FUNCREF);
			t.assert_unrelated(ti, ValueTypes.NULLFUNCREF);

			for (tj in T) {
				if (ti == tj) t.assert_equal(ti, tj);
				else t.assert_unrelated(ti, tj);
			}
		}
	}
}

def test_ref2(t: ValueTypeTester) {
	for (nullable in [true, false]) {
		var ft = ValueType.Ref(nullable, HeapType.Func(SigCache.v_v));
		t.assert_unrelated(ft, ValueTypes.ANYREF);
		t.assert_subtype(ft, ValueTypes.FUNCREF);
		t.assert_maybe(nullable, ValueTypes.NULLFUNCREF, ft);
	}
}

def test_extref_null1(t: ValueTypeTester) {
// TODO:	check_func_variance(t, ValueType.ANYREF_NULL, ValueTypes.EXTERNREF);
// TODO:	check_func_variance(t, ValueTypes.EXTERNREF, ValueType.ANYREF_NULL);
// TODO:	check_func_variance(t, ValueType.ANYREF_NULL, at);
// TODO:	check_func_variance(t, at, ValueType.ANYREF_NULL);
}

def newArrayWithPackedness(pack: Packedness) -> (Packedness, ArrayDecl) {
	return (pack, newArray([StorageType(ValueType.I32, pack, false)]));
}

def test_packed1(t: ValueTypeTester) {
	var cases = [newArrayWithPackedness(Packedness.UNPACKED),
		newArrayWithPackedness(Packedness.PACKED_I8),
		newArrayWithPackedness(Packedness.PACKED_I16)];
	for (i in cases) {
		for (j in cases) {
			var ai = i.1;
			var aj = j.1;
			var ati = VtRefT(HeapType.Array(ai));
			var atj = VtRefT(HeapType.Array(aj));
			if (i.0 == j.0) {
				t.assert_equal(ati, atj);
				t.assert_subtype(
					VtRefT(HeapType.Array(ai)),
					VtRefN(HeapType.Array(aj)));
			} else {
				t.assert_unrelated(ati, atj);
			}
		}
	}
}

def newStructWithPackedness(pack: Packedness) -> (Packedness, StructDecl) {
	return (pack, newStruct([StorageType(ValueType.I32, pack, false), StorageType(ValueType.F32, Packedness.UNPACKED, false)]));
}

def test_packed2(t: ValueTypeTester) {
	var cases = [newStructWithPackedness(Packedness.UNPACKED),
		newStructWithPackedness(Packedness.PACKED_I8),
		newStructWithPackedness(Packedness.PACKED_I16)];
	for (i in cases) {
		for (j in cases) {
			var si = i.1;
			var sj = j.1;
			var sti = VtRefT(HeapType.Struct(si));
			var stj = VtRefT(HeapType.Struct(sj));
			if (i.0 == j.0) {
				t.assert_equal(sti, stj);
				t.assert_subtype(
					VtRefT(HeapType.Struct(si)),
					VtRefN(HeapType.Struct(sj)));
			} else {
				t.assert_unrelated(sti, stj);
			}
		}
	}
}

def test_i31ref(t: ValueTypeTester) {
	t.assert_subtype(ValueTypes.I31REF, ValueTypes.ANYREF);
	t.assert_unrelated(ValueTypes.I31REF, ValueTypes.FUNCREF);
	var decls = [
		newSig([], []),
		newStruct([]),
		newArray([])
	];
	for (d in decls) {
		t.assert_unrelated(ValueTypes.I31REF, ValueTypes.Ref(true, d));
		t.assert_unrelated(ValueTypes.I31REF, ValueTypes.Ref(false, d));
	}
}

def test_exnref(t: ValueTypeTester) {
	t.assert_unrelated(ValueTypes.EXNREF, ValueTypes.ANYREF);
	t.assert_unrelated(ValueTypes.EXNREF, ValueTypes.FUNCREF);
	t.assert_unrelated(ValueTypes.EXNREF, ValueTypes.EQREF);
	
	var decls = [
		newSig([], []),
		newStruct([]),
		newArray([])
	];
	for (d in decls) {
		t.assert_unrelated(ValueTypes.EXNREF, ValueTypes.Ref(true, d));
		t.assert_unrelated(ValueTypes.EXNREF, ValueTypes.Ref(false, d));
	}
}

def test_data(t: ValueTypeTester) {
	var D = ValueTypes.EQREF;
	t.assert_subtype(D, ValueTypes.ANYREF);
	t.assert_unrelated(D, ValueTypes.FUNCREF);
	t.assert_subtype(ValueTypes.I31REF, D);
	t.assert_unrelated(D, ValueTypes.FUNCREF);
	t.assert_unrelated(D, ValueTypes.Ref(true, newSig([], [])));

	for (x in PRIMS) {
		t.assert_unrelated(D, x);
	}

	for (d in [newStruct([]), newArray([])]) {
		t.assert_subtype(ValueTypes.Ref(false, d), D);
	}
}

def test_array(t: ValueTypeTester) {
	var A = ValueTypes.ARRAYREF;
	t.assert_subtype(A, ValueTypes.ANYREF);
	t.assert_subtype(A, ValueTypes.EQREF);
	t.assert_unrelated(A, ValueTypes.FUNCREF);
	t.assert_unrelated(A, ValueTypes.Ref(true, newSig([], [])));
	t.assert_unrelated(A, ValueTypes.Ref(true, newStruct([])));
	t.assert_subtype(ValueTypes.Ref(false, newArray([])), A);

	for (x in PRIMS) {
		t.assert_unrelated(A, x);
	}

}

def test_struct(t: ValueTypeTester) {
	var A = ValueTypes.STRUCTREF;
	t.assert_subtype(A, ValueTypes.ANYREF);
	t.assert_subtype(A, ValueTypes.EQREF);
	t.assert_unrelated(A, ValueTypes.FUNCREF);
	t.assert_unrelated(A, ValueTypes.Ref(true, newSig([], [])));
	t.assert_unrelated(A, ValueTypes.Ref(true, newArray([])));
	t.assert_subtype(ValueTypes.Ref(false, newStruct([])), A);

	for (x in PRIMS) {
		t.assert_unrelated(A, x);
	}

}

// TODO: check lub of subtyping in host types, abstract types
// TODO: check glb (contravariance) of function types
