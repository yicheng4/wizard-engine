// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class for building binary modules.
class BinBuilder extends Vector<byte> {
	private var sect_body_start = -1;
	private var sect_size_pos = -1;

	def reset_header() -> this {
		var len = BinUtil.WASM_HEADER.length;
		if (this.length < len) {
			resize(0);
			puta(BinUtil.WASM_HEADER);
		} else {
			resize(len);
		}
	}
	def put_ValueType(typ: ValueType) -> this {
		match (typ) {
			I32 => put(BpTypeCode.I32.code);
			I64 => put(BpTypeCode.I64.code);
			F32 => put(BpTypeCode.F32.code);
			F64 => put(BpTypeCode.F64.code);
			V128 => put(BpTypeCode.V128.code);
			BOTTOM,
			Host => System.error("", "unimplemented");
			Ref(nullable, heap) => match (heap) {
				ANY => {
					if (!nullable) put(BpTypeCode.REF.code);
					put(BpHeapTypeCode.ANY.code);
				}
				EXTERN => {
					if (!nullable) put(BpTypeCode.REF.code);
					put(BpHeapTypeCode.EXTERN.code);
				}
				EQ => {
					if (!nullable) put(BpTypeCode.REF.code);
					put(BpHeapTypeCode.EQ.code);
				}
				I31 => {
					if (!nullable) put(BpTypeCode.REF.code);
					put(BpHeapTypeCode.I31.code);
				}
				Func(sig) => {
					put_RefType(nullable, sig, BpHeapTypeCode.FUNC.code);
				}
				Struct(sdecl) => {
					put_RefType(nullable, sdecl, BpHeapTypeCode.STRUCT.code);
				}
				Array(array) => {
					put_RefType(nullable, array, BpHeapTypeCode.ARRAY.code);
				}
				_ => System.error("BinWriter", "unhandled type");
			}
		}
	}
	private def put_RefType(nullable: bool, decl: HeapTypeDecl, code: byte) {
		if (decl == null) {
			if (!nullable) put(BpTypeCode.REF.code);
			put(code);
		} else {
			put(if(nullable, BpTypeCode.REF_NULL.code, BpTypeCode.REF.code));
			put_u32leb(u32.!(decl.heaptype_index));
		}
	}
	def put_string(str: string) -> this {
		put_u32leb(u32.!(str.length));
		puta(str);
	}
	// Begin a new section
	def beginSection(sect: BpSection) -> this {
		endSection();
		put(sect.code);
		sect_size_pos = this.length;
		for (i < 5) put(0);
		sect_body_start = this.length;
	}
	// Begin a new section which is expected to be less than 64 bytes long
	def beginShortSection(sect: BpSection) -> this {
		endSection();
		put(sect.code);
		sect_size_pos = this.length;
		put(0);
		sect_body_start = this.length;
	}
	// End the current section and patch its size
	def endSection() -> this {
		if (sect_body_start < 0) return;
		var size = this.length - sect_body_start;
		var short = (sect_body_start == sect_size_pos + 1);
		if (short) this[sect_size_pos] = byte.!(size);
		else patch_u32leb(sect_size_pos, u32.!(size));
		sect_size_pos = -1;
		sect_body_start = -1;
	}
	def put_u32leb(data: u32) -> this { // TODO: rename put_uleb32
		while (data >= 0x80) {
			put(byte.view(0x80u | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data));
	}
	def put_u64leb(data: u64) -> this { // TODO: rename put_uleb64
		while (data >= 0x80) {
			put(byte.view(0x80u | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data));
	}
	def put_s32leb(data: int) -> this {
		while (data != i7.view(data)) {
			put(byte.view(0x80 | (data & 0x7F)));
			data = data >> 7;
		}
		put(byte.view(data & 0x7F));
	}
	private def patch_u32leb(index: int, val: u32) {
		for (i < 4) {
			this[index++] = byte.view(val | 0x80);
			val = val >> 7;
		}
		this[index++] = byte.!(val);
	}
	// Get an alias of the internal storage of this vector for direct
	// access. Return an array, an offset into the array, and a length.
	def storage() -> (Array<byte>, int, int) {
		return (array, 0, length);
	}
}
component BinUtil {
	def WASM_HEADER: Array<byte> = [
		0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00
	];
}
