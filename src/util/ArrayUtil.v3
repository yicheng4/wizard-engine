// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for arrays.
component ArrayUtil {
	// TODO: migrate these last few utilities into Virgil's lib/util
	def copyInto<T>(dst: Array<T>, dst_start: int,
			src: Array<T>, src_start: int, src_end: int) {
		var len = src_end - src_start;
		for (i < len) dst[dst_start + i] = src[src_start + i];
	}
	def boundsCheck<T>(data: Array<T>, offset: u32, index: u32, size: u32) -> int {
		var length = if(data != null, u64.!(data.length));
		var x = u64.!(offset) + u64.!(index);
		return if(x + size > length, int.min, int.!(x));
	}
	def safeCopy<T>(dst: Array<T>, dst_offset: u32, src: Array<T>, src_offset: u32, size: u32) -> bool {
		var i = boundsCheck(dst, 0, dst_offset, size);
		if (i < 0) return false;
		var j = boundsCheck(src, 0, src_offset, size);
		if (j < 0) return false;
		if (src == dst && i > j) { // potentially overlapping, copy in reverse
			var max = int.!(size) - 1;
			for (k = max; k >= 0; k--) dst[i + k] = src[j + k];
		} else {
			for (k < int.!(size)) dst[i + k] = src[j + k];
		}
		return true;
	}
	def safeCopyF<D, S>(dst: Array<D>, dst_offset: u32, src: Array<S>, src_offset: u32, size: u32, f: S -> D) -> bool {
		var i = boundsCheck(dst, 0, dst_offset, size);
		if (i < 0) return false;
		var j = boundsCheck(src, 0, src_offset, size);
		if (j < 0) return false;
		for (k < int.!(size)) {
			dst[i + k] = f(src[j + k]);
		}
		return true;
	}
	def mapInPlace<T>(array: Array<T>, f: T -> T) -> Array<T> {
		for (i < array.length) array[i] = f(array[i]);
		return array;
	}
	// compare elements of {x} and {y} for equality
	def equal<A>(x: Range<A>, y: Range<A>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (x[i] != y[i]) return false;
		return true;
	}
	def copyReverse<T>(v: Vector<T>) -> Array<T> {
		var result = Array<T>.new(v.length);
		for (i < result.length) {
			result[i] = v[result.length - i - 1];
		}
		return result;
	}
}