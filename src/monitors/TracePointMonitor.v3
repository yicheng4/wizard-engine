// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def E = MonitorRegistry.register(
	"tracepoints", "Traces local frame stack at given points.",
	TracePointMonitor.new());
def pointList_ = E // TODO: return Option<int>
	.addOption("", "points in functions to trace, given as <func-filter>:min_pc..max_pc");

var points: List<(DeclFilter, u32, u32)>;
def TRACE_PROBE = TracePointProbe.new();

class TracePointMonitor extends Monitor {
	def configure(args: string) -> string {
		var p = TextReader.new("<option>", args);
		Trace.OUT.put1("args=%s", args).outln();
		while (p.pos < p.limit) {
			var pair = DeclFilters.parseMatcherPair(p);
			var min = 0u, max = u32.max;
			if (p.opt1(':') > 0) {
				var t = DeclFilters.parseSequence(p);
				min = t.0;
				max = t.1;
				if (min == max) max = min + 1;
			}
			var filter = DeclFilter.new("", List.new(pair, null));
			points = List.new((filter, min, max), points);
			Trace.OUT.put3("%q: min=%d, max=%d", filter.render, min, max).outln();
			p.opt1(',');
		}
		return null;
	}

	def onParse(module: Module) {
		var bi = BytecodeIterator.new();
		for (i < module.functions.length) {
			var func = module.functions[i];
			for (l = points; l != null; l = l.tail) {
				var f = l.head;
				if (!f.0.matches(module, func)) continue;
				for (it = bi.reset(func); it.more(); it.next()) {
					if (it.pc >= f.1 && it.pc < f.2) Instrumentation.insertLocalProbe(module, func.func_index, it.pc, TRACE_PROBE);
				}
			}
		}
	}
}

class TracePointProbe extends Probe {
	def fire(dynamicLoc: DynamicLoc) -> Resumption {
		var func = dynamicLoc.func;
		var offset = dynamicLoc.pc;
		var module = if(func.instance != null, func.instance.module);
		var out = Trace.OUT;
		var len = out.length;
		var accessor = dynamicLoc.frame.getFrameAccessor();
		out.pad(' ', len + 2 * accessor.depth());
		out.putc('#').putd(func.decl.func_index);
		out.puts(" +").putd(offset);

		out.puts(" |");
		for (i < accessor.numLocals()) {
			out.sp().putv(accessor.getLocal(i));
		}
		var count = accessor.numOperands();
		out.puts(" |");
		for (j = 1 - count; j <= 0; j++) {
			out.sp().putv(accessor.getOperand(j));
		}
		out.outln();
		return Resumption.Continue;
	}
}
