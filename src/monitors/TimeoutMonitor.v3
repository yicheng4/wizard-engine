// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple instruction-based timeout.
def E = MonitorRegistry.register(
	"timeout", "Enforces a limit on the number of instructions executed.",
	TimeoutMonitor.new());
def count_ = E // TODO: return Option<int>
	.addOption("instrs=<N>", "set the instruction count limit");

class TimeoutMonitor extends Monitor {
	var count = -1;
	def configure(args: string) -> string {
		def argMap = MonitorUtil.argMapFrom(args);
		var instrs = argMap["instrs"];
		if (instrs != null) {
			var t = Ints.parseDecimal(instrs, 0);
			if (t.0 != instrs.length) return Strings.format1("invalid argument(s) \"%s\"", args);
			count = t.1;
		} else {
			return "expected argument: instrs=<N>";
		}
		return null;
	}
	def onReset() {
		if (count >= 0) Instrumentation.insertGlobalProbe(TimeoutProbe.new(count));
	}
}
