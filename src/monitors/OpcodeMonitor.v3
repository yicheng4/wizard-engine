// Copyright 2023 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implements a simple monitor that counts the static and dynamic occurrences of each opcode.
def E_ = MonitorRegistry.register(
	"opcodes", "Tallies static and dynamic counts of each Wasm opcode.",
	OpcodeMonitor.new());

class OpcodeMonitor extends Monitor {
	def entries = Vector<OpcodeEntry>.new();
	def it = BytecodeIterator.new();
	var inCodeMode = false;

	def onParse(m: Module) {
		var mm = ModuleMonitor.new(m);
		mm.forEachFunc(MonitorUtil.isNotImport, monitorFunc(mm, _));
	}

	def onExit(val: int) {
		output(entries);
	}
	def onFinish(i: Instance) {
		output(entries);
	}

	private def monitorFunc(mm: ModuleMonitor, func: FuncDecl) {
		for (bi = it.reset(func); bi.more(); bi.next()) {
			var op = bi.current();
			var probe: CountProbe;
			if (op.tag >= entries.length) {
				probe = CountProbe.new();
				entries.set(op.tag, OpcodeEntry(op, 1, probe));
			} else {
				var e = entries[op.tag];
				probe = if(e.count != null, e.count, CountProbe.new());
				entries[op.tag] = OpcodeEntry(op, e.static_count + 1u, probe);
			}
			Instrumentation.insertLocalProbe(mm.module, func.func_index, bi.pc, probe);
		}
	}
}

type OpcodeEntry(op: Opcode, static_count: u32, count: CountProbe) #unboxed;

def compare(a: OpcodeEntry, b: OpcodeEntry) -> bool {
	if (a.count == null) return false;
	if (b.count == null) return true;
	return a.count.count > b.count.count;
}

def table = initTable();
def initTable() -> TraceTable {
	var t = TraceTable.new(["Opcode", "static", "dynamic"]);
	t.cells[0].set(24, Justification.LEFT, null);
	t.cells[1].set(7, Justification.RIGHT, null);
	t.cells[2].set(12, Justification.RIGHT, null);
	return t;
}

def output(entries: Vector<OpcodeEntry>) {
	var C = table.cells;
	C[1].color = Palette.COUNT;
	C[2].color = Palette.COUNT;
	if (MonitorOptions.csv) table.putCsvHeader(Trace.OUT);
	else table.putTableHeader(Trace.OUT);
	Trace.OUT.flush();
	var array = entries.copy();
	array = Arrays.sort(array, 0, array.length, compare);
	for (e in array) {
		if (e.count == null) continue;
		var nl = e.op.name.length;
		C[0].color = if(e.count.count > 0, Palette.COVERED, Palette.UNREACHABLE);
		C[0].puts(e.op.name);
		C[1].putd(e.static_count);
		C[2].putd(e.count.count);
		if (MonitorOptions.csv) table.putCsvRow(Trace.OUT);
		else table.putTableRow(Trace.OUT);
		Trace.OUT.flush();
	}
}
