// Copyright 2023 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component WasiPathUtil {
	def normalize_path = normalize_path0;

}

def is_absolute_path(path: Array<byte>) -> bool {
	return (path.length > 0) && (path[0] == '/');
}

// Function to find the first occurrence of a slash in a string
def find_next_slash(s: Array<byte>, start_pt: i32) -> int {
	var i = start_pt;
	while (i < s.length) {
		var currentChar = s[i];
		if (currentChar == 0) {// Equivalent to checking for null termination in C
			return -1;
		}
		if (currentChar == '/') {
			return i;
		}
		i += 1;
	}
	return -1;
}

def normalize_path0(path: Array<byte>, pathLen: i32) -> (Array<byte>, i32, wasi_errno) {
	var cur = 0;
	var normalized = StringBuilder.new();
	var nextSlash = 0;
	var last = 0;
	var isAbsPath = is_absolute_path(path);

	for (cur = 0; cur < pathLen; cur = nextSlash + 1) {
		nextSlash = find_next_slash(path, cur);
		var curSegmentLength = if (nextSlash == -1, pathLen - cur, nextSlash - cur);
		if (curSegmentLength == 0) {
			if (normalized.length == 0 && nextSlash != -1 && isAbsPath) {
				normalized.putc('/');
			}
		} else if (curSegmentLength == 1 && path[cur] == '.') {
			/* No-op. Just consume the '.' */
		} else if (curSegmentLength == 2 && path[cur] == '.' && path[cur + 1] == '.') {
		
			var tmpResult = normalized.toString();
			
			last = tmpResult.length - 1;
			var tmpLen = tmpResult.length;
			while (last >= 0) {
				var lastC = tmpResult[last];
				if (lastC == '/'){
					break;
				}
				last -= 1;
			}
			/* If the result is currently empty, or the last prior path is also '..'
			 then output '..'. Otherwise, remove the last path segment. */
			if (tmpLen == 0) {
				normalized.puts("..");
			} else if ((last == tmpLen - 3 || last == tmpLen - 4 && tmpResult[tmpLen - 3] == '/') && tmpResult[tmpLen - 2] == '.' &&
								 tmpResult[tmpLen - 1] == '.') {
				normalized.puts("/..");
			} else {
				/* Strip the last segment, but make sure not to strip the '/' if that
					 is the entire path. */
				if (last == 0 && tmpResult[last] == '/') {
					last++;
				}
				normalized = StringBuilder.new();
				var i = 0;
				for (i = 0; i <= last; i++) {
					normalized.putc(tmpResult[i]);// not good here
				}
			}
		} else {
			if (normalized.length > 0){
				var normalizedStr = normalized.toString();
				if (normalizedStr[normalizedStr.length - 1] != '/'){
					normalized = StringBuilder.new();
					normalized.puts(normalizedStr);
					normalized.putc('/');
				}
			}
			var i = cur;
			for (i = cur; i < cur + curSegmentLength; i++) {
				normalized.putc(path[i]);
			}
		}

		if (nextSlash < 0) {
			break;
		}
	}

	/* Normalized the path is the empty string. Return either '/' or '.'. */
	if (normalized.length == 0) {
		if (isAbsPath) {
			normalized.putc('/');
		} else {
			normalized.putc('.');
		}
	}
        normalized.putc(0);
	var len = normalized.length;
	return (normalized.toString(), len, wasi_errno.SUCCESS);
}
