// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses command-line options that configure an engine.
component EngineOptions {
	var stackSize = 512u * 1024u;	// default value stack size
	var jitFilter: DeclFilter;	// debugging option to limit JIT compilations
	var names = true;		// recognize names section

	def parse(engine: Engine, arg: string) -> bool {
		if (arg == null) return false;
		if (arg.length < 1 || arg[0] != '-') return false;
		if (Strings.startsWith(arg, "-ext:")) {
			if (Strings.endsWithFrom(arg, 5, "all")) {
				engine.extensions = Extension.set.all;
				return true;
			}
			for (e in Extension) {
				if (Strings.endsWithFrom(arg, 5, e.short_name)) {
					engine.extensions |= Extensions.setImplications(e);
					return true;
				}
			}
		}
		if (Strings.startsWith(arg, "-stack-size=")) {
			stackSize = parseSize(arg, 12);
			Trace.OUT.put1("stack size = %d", stackSize).outln();
			return true;
		}
		if (Strings.startsWith(arg, "-mode=")) {
			return ExecuteOptions.setMode(arg[6 ...]);
		}
		if (Strings.equal(arg, "-no-names")) {
			EngineOptions.names = false;
			return true;
		}
		var jitFilterEq = "-jit-filter=";
		if (Strings.startsWith(arg, jitFilterEq)) {
			var pat: string;
			if (arg.length > jitFilterEq.length) {
				pat = Arrays.range(arg, jitFilterEq.length, arg.length);
			}
			jitFilter = DeclFilters.parseString(pat);
			return true;
		}
		return false;
	}
	def parseSize(str: string, pos: int) -> u32 {
		var len = str.length;
		var last = str[len - 1], scale = 1u, max = u32.max;
		match(last) {
			'k', 'K' => { scale = 1024u; max = 4194304u; len--; }
			'm', 'M' => { scale = 1048576u; max = 4096u; len--; }
			'g', 'G' => { scale = 1073741824u; max = 4u; len--; }
		}
		var p = Ints.parsePosDecimal(str, pos);
		if (pos + p.0 == len) {
			if (p.1 >= max) return u32.max;
			return p.1 * scale;
		}
		return 0;
	}
	def printHelp() {
		var out = Trace.OUT, H = out.putsln;
		H("ENGINE OPTIONS");
		H("");
		H("Wizard supports a number of WebAssembly extensions. None are enabled by default.");
		H("Each extension can be enabled independently with its own flag. Some extensions imply");
		H("other extensions as indicated below.");
		H("");
		
		for (e in Extension) {
			out.puts("    -ext:");
			out.puts(e.short_name);
			out.pad(' ', 32);
			out.puts(e.help);
			out.outln();

			var set: Extension.set = e;
			var none: Extension.set;
			set = Extensions.setImplications(set) - e;
			if (set != none) {
				out.puts("        implies: ");
				var first = true;
				for (e in set) {
					if (!first) out.csp();
					out.puts(e.short_name);
					first = false;
				}
				out.outln();
			}
		}
		H("");
		ExecuteOptions.printHelp();
	}
}
