// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Centralizes all the trace flags, even some components that are optional.
// Note that since these fields are all set to false by default, unless the {TraceOptions.v3}
// file or other write to them is reachable, they will be constant-folded by the compiler
// and trace code will be dead-code eliminated.
component Trace {
	var fatal = false;
	var interpreter = false;
	var binparse = false;
	var validation = false;
	var test = false;
	var spectest = false;
	var operands = false;
	var memory = false;
	var canon = false;
	var uid = false;
	var compiler = false;
	var exception = false;
	var stack = false;

	var moduleFilter: DeclFilter;
	var callsFilter: DeclFilter;

	def OUT = TraceBuilder.new();
	def STDOUT = System.write(1, _);
	def STDOUT_p = System.fileWriteK(1, _, _, _);

	def CALL_TRACE_PROBE = CallTraceProbe.new();

	def instrumentModule(module: Module) {
		if (callsFilter == null) return;
		// Add a call tracer if the global option is turned on.
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (callsFilter.matches(module, func)) {
				Instrumentation.insertFuncEntryProbe(module, func.func_index, CALL_TRACE_PROBE);
			}
		}
	}
	def instrumentFunc(module: Module, func: FuncDecl) {
		if (callsFilter == null) return;
		if (callsFilter.matches(module, func)) {
			Instrumentation.insertFuncEntryProbe(module, func.func_index, CALL_TRACE_PROBE);
		}
	}
}
// A TraceBuilder is a {StringBuilder} which can also dump itself to stdout
// and has additional utility methods.
class TraceBuilder extends StringBuilder {
	private var markpos: int;

	// Appends a newline and flushes to standard out, leaving this builder empty.
	def outln() -> this {
		markpos = 0;
		ln();
		send(Trace.STDOUT);
		reset();
	}
	// Flushes any accumulated characters to standard out and resets.
	def flush() -> this {
		send(Trace.STDOUT);
		reset();
	}
	// Puts a string {str} into the trace, followed by a newline, and then flushes.
	def putsln(str: string) -> this {
		puts(str).outln();
	}
	// Puts a decimal number, right-justified up to {width}.
	def putd_rjustified<T>(width: int, val: T) -> this {
		var before = length;
		putd(val);
		rjustify(' ', length - before, width);
	}
	// Puts a {Value}.
	def putv(v: Value) -> this {
		Values.render(v, this);
	}
	// Records a mark that can be used later for rjustify_mark().
	def mark() -> this {
		markpos = length;
	}
	// Pads the characters output since the last {mark()} with spaces, up to {width}.
	def rjustify_mark(width: int) -> this {
		rjustify(' ', length - markpos, width);
		markpos = length;
	}
	// Pads the characters output since the last {mark()} with spaces, up to {width}.
	def ljustify_mark(width: int) -> this {
		var count = width - (length - markpos);
		for (i < count) putc(' ');
		markpos = length;
	}
	def putk_void(s: Array<byte>, start: int, end: int) {
		putk(s, start, end);
	}
	def indent(depth: int) -> this {
		for (i < depth) puts("  ");
	}
}
