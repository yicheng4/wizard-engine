// Copyright 2023 Wizard. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of the sidetable used for fast interpretation.
type Sidetable(entries: Array<int>) #unboxed {
	// Get an entry for a branch at the given sidetable position.
	def getBrEntry(stp: int) -> SidetableBrEntry {
		return SidetableBrEntry(
			entries[Sidetables.dpc_pos + stp],
			entries[Sidetables.valcount_pos + stp],
			entries[Sidetables.popcount_pos + stp],
			entries[Sidetables.dstp_pos + stp]);
	}
	// Get an entry for a rethrow at the given sidetable position.
	def getRethrowEntry(stp: int) -> SidetableRethrowEntry {
		return SidetableRethrowEntry(entries[stp + 0]);
	}
	// Get an entry for a catch at the given sidetable position.
	def getCatchEntry(stp: int) -> SidetableCatchEntry {
		var sidetable_pos = stp + entries[stp + Sidetables.dstp_pos];
		return SidetableCatchEntry(entries[stp + Sidetables.dpc_pos], entries[stp + Sidetables.valcount_pos], sidetable_pos);
	}
	// Gets the count of entries in this table.
	def count() -> int {
		return entries.length / Sidetables.br_entry_size;
	}
}
// A sidetable entry associated with a branch.
type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;
// A sidetable entry associated with a (lexical) rethrow.
type SidetableRethrowEntry(catch_slot: int) #unboxed;
// A sidetable entry associated with a catch entry.
type SidetableCatchEntry(handler_pc: int, val_stack_top: int, sidetable_pos: int) #unboxed;


// Global constants associated with sidetables.
component Sidetables {
	def br_entry_size = 4;
	def br_entry_size_log: u5 = 2;
	def rethrow_entry_size = 4;
	def ex_entry_size = 4;
	def dpc_pos = 0;
	def valcount_pos = 1;
	def popcount_pos = 2;
	def dstp_pos = 3;

	def NO_SIDETABLE = Sidetable([]);

	def putBrEntry(v: Vector<int>, dpc: int, valcount: int, popcount: int, dstp: int) {
		v.put(dpc)      // delta pc
		 .put(valcount) // value count
		 .put(popcount) // pop count
		 .put(dstp);    // delta stp
	}
	def putCatchEntry(v: Vector<int>, handler_pc: int, val_stack_top: int, sidetable_pos: int) {
		v.put(handler_pc)
		 .put(val_stack_top)
		 .put(0)
		 .put(sidetable_pos);
	}
}

// Implements an efficient mapping from program counter to sidetable position.
// The sidetable itself is stored in a {FuncDecl} without this mapping (to save space).
class SidetableMap(func: FuncDecl) {
	private def pairs = Vector<PcPair>.new();

	new() {
		var bi = BytecodeIterator.new().reset(func);
		var visitor = SidetableMapperVisitor.new(this, bi);
		while (bi.more()) {
			bi.dispatch(visitor);
			bi.next();
		}
	}

	// Get the sidetable entry position
	def [pc: int] -> int {
		// XXX: use a binary search
		var i = 0;
		var stp = 0;
		while (i < pairs.length) {
			var e = pairs[i];
			if (e.pc > pc) break;
			stp = e.stp;
			i++;
		}
		return stp;
	}
}

private type PcPair(pc: int, stp: int) #unboxed { }
private class SidetableMapperVisitor(map: SidetableMap, bi: BytecodeIterator) extends BytecodeVisitor {
	var cur: int;

	def br_entry() {
		cur += Sidetables.br_entry_size;
		map.pairs.put(PcPair(bi.pc + 1, cur));
	}
	def rethrow_entry() {
		cur += Sidetables.rethrow_entry_size;
		map.pairs.put(PcPair(bi.pc + 1, cur));
	}
	def br_entries(n: int) {
		cur += Sidetables.br_entry_size * (1 + n);
		map.pairs.put(PcPair(bi.pc + 1, cur));
	}

	def visit_IF(btc: BlockTypeCode)				{ br_entry(); }
	def visit_ELSE()						{ br_entry(); }
	def visit_RETHROW(label: u31)					{ rethrow_entry(); }
	def visit_BR(label: u31) 					{ br_entry(); }
	def visit_BR_IF(label: u31) 					{ br_entry(); }
	def visit_BR_TABLE(labels: Range<u31>)				{ br_entries(labels.length); }
	def visit_TRY_TABLE(btc: BlockTypeCode, catches: Range<BpCatchCode>)	{ cur += catches.length * Sidetables.ex_entry_size; }
	def visit_BR_ON_NULL(label: u31)				{ br_entry(); }
	def visit_BR_ON_NON_NULL(label: u31)				{ br_entry(); }
	def visit_BR_ON_CAST(imm: BrOnCastImm)				{ br_entry(); }
	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm)			{ br_entry(); }
}
