// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def FINISHED: Throwable = null;
// Shared runtime routines that are called by both the fast interpreter and JITed code.
component X86_64Runtime {
	var curStack: X86_64Stack;

	def run(f: Function, args: Range<Value>) -> Result {
		if (curStack == null) curStack = X86_64Stack.new(EngineOptions.stackSize);
		// Unpack arguments into value stack format.
		var prev_vsp = curStack.vsp;
		if (args != null) for (v in args) curStack.push(v);

		// Call the main loop which handles tail calls.
		var thrown = runWithTailCalls(f, Pointer.NULL);
		// Unpack the abrupt return value into a {Result}.
		if (thrown == null) {
			var result = popResult(f.sig);
			if (curStack.vsp != prev_vsp) {
				return Result.Throw(InternalError.new(
					Strings.format2("stack height mismatch, expected vsp = 0x%x, got 0x%x",
						prev_vsp - Pointer.NULL, curStack.vsp - Pointer.NULL), null));
			}
			return result;
		} else {
			curStack.vsp = prev_vsp;
			return Result.Throw(thrown);
		}
	}
	private def runWithTailCalls(f: Function, sp: Pointer) -> Throwable {
		var state = FINISHED;
		while (true) { // handle repeated tail calls
			var result: HostResult;
			match (f) {
				wf: WasmFunction => {
					var vsp = curStack.vsp;
					if (Debug.runtime) Trace.OUT.put2("runWithTailCalls(wf=0x%x, vsp=0x%x)",
						(Pointer.atObject(wf) - Pointer.NULL), vsp - Pointer.NULL).outln();
					var ret = invoke(wf, vsp);
					if (ret == null) {
						curStack.vsp = vsp + ((wf.sig.results.length - wf.sig.params.length) * curStack.valuerep.slot_size);
					}
					return ret;
				}
				hf: HostFunction => {
					if (Trace.interpreter) Execute.traceCallHostFunction(hf);
					var result = doInvokeHostFunction(hf);
					match (result) {
						Throw(thrown) => {
							if (sp != Pointer.NULL) prependFrames(thrown, hf, sp);
							state = thrown;
							break;
						}
						Value0 => {
							break;
						}
						Value1(val) => {
							curStack.push(val);
							break;
						}
						ValueN(vals) => {
							for (a in vals) curStack.push(a);
							break;
						}
						TailCall(target, args) => {
							for (a in args) curStack.push(a);
							f = target;
							continue; // continue with next tail call
						}
					}
				}
			}
		}
		return state;
	}
	private def doInvokeHostFunction(hf: HostFunction) -> HostResult {
		var aN = curStack.popN(hf.sig.params);
		return hf.invoke(aN);
	}
	private def invoke(wf: WasmFunction, sp: Pointer) -> Throwable {
		Debug.invoke(wf);
		if (wf.decl.target_code.spc_entry != Pointer.NULL) {
			Debug.invokeSpc(wf);
			return X86_64Spc.invoke(wf, sp);
		} else {
			Debug.invokeInterpreter(wf);
			return X86_64PreGenStubs.getIntV3Entry()(wf, sp);
		}
	}
	private def popResult(sig: SigDecl) -> Result {
		var rt = sig.results;
		var r = Array<Value>.new(rt.length);
		for (i = r.length - 1; i >= 0; i--) r[i] = curStack.pop(rt[i]);
		return Result.Value(r);
	}
	//=====================================================================
	// Standard callbacks for complex bytecodes
	//=====================================================================
	def runtime_callHost(f: Function) -> Throwable {
		var state = runWithTailCalls(f, CiRuntime.callerSp());
		return state;
	}
	def runtime_callHost2(hf: HostFunction) -> (Throwable, WasmFunction) {
		var stack = curStack; // XXX: accept as parameter?
		var args: Range<Value> = stack.popN(hf.sig.params);
		while (hf != null) {
			if (Trace.interpreter) Execute.traceCallHostFunction(hf);
			var result = hf.invoke(args);
			match (result) {
				Throw(thrown) => {
					if (stack.catch(thrown)) return (null, null);
					else return (thrown, null);
				}
				Value0 => {
					break;
				}
				Value1(val) => {
					stack.push(val);
					break;
				}
				ValueN(vals) => {
					for (a in vals) stack.push(a);
					break;
				}
				TailCall(ntarget, nargs) => {
					match (ntarget) {
						x: HostFunction => { // loop above will handle tail-call to host
							hf = x;
							args = nargs;
							continue;
						}
						x: WasmFunction => { // caller Wasm code will handle tail-call
							for (a in nargs) stack.push(a);
							return (null, x);
						}
					}
				}
			}
		}
		return (null, null);
	}
	def runtime_MEMORY_GROW(instance: Instance, index: u32) {
		var memory = instance.memories[index];
		var pages = Values.v_u(curStack.pop(ValueType.I32));
		var result = memory.grow(pages);
		curStack.push(Values.i_v(result));
	}
	def runtime_MEMORY_INIT(instance: Instance, dindex: u32, mindex: u32) -> Throwable {
		var memory = instance.memories[mindex];
		var ddecl = if(!instance.dropped_data[dindex], instance.module.data[int.!(dindex)]);
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var dst_offset = curStack.popu();
		var t = memory.copyIn(dst_offset, if(ddecl != null, ddecl.data), src_offset, size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_MEMORY_COPY(instance: Instance, mindex1: u32, mindex2: u32) -> Throwable { // XXX: inline
		var dst = instance.memories[mindex1];
		var src = instance.memories[mindex2];
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var dst_offset = curStack.popu();
		var t = dst.copyM(dst_offset, src, src_offset, size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_MEMORY_FILL(instance: Instance, mindex: u32) -> Throwable {
		var memory = instance.memories[mindex];
		var size = curStack.popu();
		var val = curStack.popu();
		var dest = curStack.popu();
		var t = memory.fill(dest, u8.view(val), size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_GLOBAL_GET(instance: Instance, index: u32) { // XXX: inline when Value rep known
		var val = instance.globals[index].value;
		curStack.push(val);
	}
	def runtime_GLOBAL_SET(instance: Instance, index: u32) { // XXX: inline when Value rep known
		var g = instance.globals[index];
		var val = curStack.pop(g.valtype);
		g.value = val;
	}
	def runtime_TABLE_GET(instance: Instance, index: u32) -> Throwable { // XXX: inline when Value rep known
		var table = instance.tables[index];
		var elem = Values.v_u(curStack.pop(ValueType.I32));
		if (elem >= table.elems.length) return doTrap(TrapReason.TABLE_OUT_OF_BOUNDS, CiRuntime.callerSp());
		var val = table.elems[elem];
		curStack.push(val);
		return FINISHED;
	}
	def runtime_TABLE_SET(instance: Instance, index: u32) -> Throwable {
		var table = instance.tables[index];
		var val = curStack.pop(table.elemtype);
		var elem = Values.v_u(curStack.pop(ValueType.I32));
		if (elem >= table.elems.length) return doTrap(TrapReason.TABLE_OUT_OF_BOUNDS, CiRuntime.callerSp());
		table[int.view(elem)] = val;
		return FINISHED;
	}
	def runtime_TABLE_INIT(instance: Instance, eindex: u32, tindex: u32) -> Throwable {
		var elem = if (!instance.dropped_elems[eindex], instance.module.elems[int.!(eindex)]);
		var table = instance.tables[tindex];
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var dst_offset = curStack.popu();
		var t = table.copyE(instance, dst_offset, elem, src_offset, size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_TABLE_COPY(instance: Instance, t1: u32, t2: u32) -> Throwable {
		var dst = instance.tables[t1];
		var src = instance.tables[t2];
		var size = curStack.popu(), src_offset = curStack.popu(), dst_offset = curStack.popu();
		var t = dst.copyT(dst_offset, src, src_offset, size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_TABLE_GROW(instance: Instance, tindex: u32) {
		var table = instance.tables[tindex];
		var size = curStack.popu();
		var val = curStack.pop(table.elemtype);
		var r = table.grow(size, val);
		curStack.push(Values.i_v(r));
	}
	def runtime_TABLE_FILL(instance: Instance, tindex: u32) -> Throwable { // XXX: inline when Value rep known
		var table = instance.tables[tindex];
		var size = curStack.popu();
		var val = curStack.pop(table.elemtype);
		var dest = curStack.popu();
		var t = table.fill(dest, val, size);
		if (t != TrapReason.NONE) return doTrap(t, CiRuntime.callerSp());
		return FINISHED;
	}
	def runtime_PROBE_loop(func: WasmFunction, pc: int) -> Throwable {
		var frame = TargetFrame(CiRuntime.callerSp());
		var ret = Instrumentation.fireGlobalProbes(DynamicLoc(func, pc, frame));
		if (Trap.?(ret)) return prependFrames(Trap.!(ret), null, CiRuntime.callerSp());
		return ret;
	}
	def runtime_PROBE_instr(func: WasmFunction, pc: int) -> Throwable {
		var frame = TargetFrame(CiRuntime.callerSp());
		var ret = Instrumentation.fireLocalProbes(DynamicLoc(func, pc, frame));
		if (Trap.?(ret)) return prependFrames(Trap.!(ret), null, CiRuntime.callerSp());
		return ret;
	}
	def runtime_TRAP(func: WasmFunction, pc: int, reason: TrapReason) -> Throwable {
		if (Debug.runtime) Trace.OUT.put3("runtime_TRAP(%q, @+%d, %s)", func.render, pc, reason.name).outln();
		var trap = Trap.new(reason, null, null);
		return prependFrames(trap, null, CiRuntime.callerSp());
	}
	def runtime_TIERUP(func: WasmFunction, pc: int) {
		if (Debug.runtime) Trace.OUT.put3("tierup(wf=0x%x, func=#%d, pc=%d)",
					(Pointer.atObject(func) - Pointer.NULL), func.decl.func_index, pc).outln();
		var osr = Execute.tiering.onTierUp(func, pc);
		for (l = osr.osr_entries; l != null; l = l.tail) {
			if (l.head.0 == pc) {
				var entrypoint = osr.spc_entry + l.head.1;
				if (Debug.runtime) Trace.OUT.put1("  tierup to 0x%x", entrypoint - Pointer.NULL).outln();
				var retaddr_ptr = CiRuntime.callerSp() + -Pointer.SIZE;
				retaddr_ptr.store<Pointer>(entrypoint); // overwrite return address to return to JIT code
				return;
			}
		}
	}
	def prependFrames(thrown: Throwable, hf: HostFunction, sp: Pointer) -> Throwable {
		var frame = TargetFrame(sp);
		var trace = Vector<(WasmFunction, int)>.new();
		var accessor = frame.getFrameAccessor();
		while (accessor != null) {
			trace.put(accessor.func(), accessor.pc());
			var c = accessor.caller();
			match (c) {
				Wasm(func, pc, frame) => {
					accessor = frame.getFrameAccessor(); // XXX: get frame without inflating accessor
				}
				_ => break;
			}
		}
		var result = Array<(WasmFunction, int)>.new(trace.length); // reverse frames
		for (i < result.length) {
			result[i] = trace[result.length - i - 1];
		}
		thrown.prepend(result, hf);
		return thrown;
	}
	def doTrap(reason: TrapReason, sp: Pointer) -> Throwable {
		var trap = Trap.new(reason, null, null);
		return prependFrames(trap, null, sp);
	}

	//=====================================================================
	// GC proposal callbacks
	//=====================================================================
	def runtime_STRUCT_NEW(instance: Instance, index: u32) { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[index]);
		var fields = Array<Value>.new(decl.field_types.length);
		for (i = fields.length - 1; i >= 0; i--) {
			fields[i] = curStack.pop(decl.field_types[i].valtype);
		}
		curStack.push(Value.Ref(HeapStruct.new(decl, fields)));
	}
	def runtime_STRUCT_NEW_DEFAULT(instance: Instance, index: u32) { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[index]);
		var fields = Array<Value>.new(decl.field_types.length);
		for (i < fields.length) {
			fields[i] = Values.default(decl.field_types[i].valtype);
		}
		curStack.push(Value.Ref(HeapStruct.new(decl, fields)));
	}
	def runtime_STRUCT_GET(instance: Instance, sindex: u32, findex: u32) -> Throwable { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		curStack.push(obj.vals[findex]);
		return null;
	}
	def runtime_STRUCT_GET_S(instance: Instance, sindex: u32, findex: u32) -> Throwable { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(curStack.popObject());
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		curStack.push(V3Eval.signExtend(decl.field_types[findex], obj.vals[findex]));
		return null;
	}
	def runtime_STRUCT_GET_U(instance: Instance, sindex: u32, findex: u32) -> Throwable { // XXX: unify with V3Interpreter
		var obj = HeapStruct.!(curStack.popObject());
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		curStack.push(V3Eval.zeroExtend(decl.field_types[findex], obj.vals[findex]));
		return null;
	}
	def runtime_STRUCT_SET(instance: Instance, sindex: u32, findex: u32) -> Throwable { // XXX: unify with V3Interpreter
		var decl = StructDecl.!(instance.heaptypes[int.view(sindex)]);
		var val = curStack.pop(decl.field_types[findex].valtype);
		var obj = HeapStruct.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		obj.vals[findex] = val;
		return null;
	}
	def runtime_ARRAY_NEW(instance: Instance, index: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		var len = curStack.popu();
		var elem = curStack.pop(decl.elem_types[0].valtype);
		if (len > Execute.limits.max_array_length) return doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		for (i < vals.length) vals[i] = elem;
		curStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
	def runtime_ARRAY_NEW_DEFAULT(instance: Instance, index: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		var len = curStack.popu();
		if (len > Execute.limits.max_array_length) return doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		var elem = Values.default(decl.elem_types[0].valtype);
		for (i < vals.length) vals[i] = elem;
		curStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
	def runtime_ARRAY_GET(instance: Instance, ignore: u32) -> Throwable {
		var index = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		curStack.push(obj.vals[index]);
		return null;
	}
	def runtime_ARRAY_GET_S(instance: Instance, aindex: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var index = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		curStack.push(V3Eval.signExtend(decl.elem_types[0], obj.vals[index]));
		return null;
	}
	def runtime_ARRAY_GET_U(instance: Instance, aindex: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var index = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		curStack.push(V3Eval.zeroExtend(decl.elem_types[0], obj.vals[index]));
		return null;
	}
	def runtime_ARRAY_SET(instance: Instance, aindex: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[aindex]);
		var val = curStack.pop(decl.elem_types[0].valtype);
		var index = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		if (obj == null) return doTrap(TrapReason.NULL_DEREF, CiRuntime.callerSp());
		if (index >= u32.view(obj.vals.length)) return doTrap(TrapReason.ARRAY_INDEX_OOB, CiRuntime.callerSp());
		obj.vals[index] = val;
		return null;
	}
	def runtime_ARRAY_NEW_FIXED(instance: Instance, index: u32, len: u32) -> Throwable {
		var decl = ArrayDecl.!(instance.heaptypes[index]);
		if (len > Execute.limits.max_array_length) return doTrap(TrapReason.OOM, CiRuntime.callerSp());
		var length = int.view(len);
		var vals = Array<Value>.new(length);
		var t = decl.elem_types[0].valtype;
		for (i = vals.length - 1; i >= 0; i--) vals[i] = curStack.pop(t);
		curStack.push(Value.Ref(HeapArray.new(decl, vals)));
		return null;
	}
	def runtime_ARRAY_NEW_DATA(instance: Instance, index: u32, dindex: u32) -> Throwable {
		var len = curStack.popu();
		var offset = curStack.popu();
		var result = Runtime.ARRAY_NEW_DATA(instance, index, dindex, offset, len);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		curStack.push(Value.Ref(result.result));
		return null;
	}
	def runtime_ARRAY_NEW_ELEM(instance: Instance, index: u32, eindex: u32) -> Throwable {
		var len = curStack.popu();
		var offset = curStack.popu();
		var result = Runtime.ARRAY_NEW_ELEM(instance, index, eindex, offset, len);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		curStack.push(Value.Ref(result.result));
		return null;
	}
	def runtime_ARRAY_FILL(instance: Instance, index: u32) -> Throwable {
		var rtt = ArrayDecl.!(instance.heaptypes[index]);
		var size = curStack.popu();
		var val = curStack.pop(rtt.elem_types[0].valtype); // XXX: polymorphic pop
		var offset = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		var result = Runtime.ARRAY_FILL(obj, offset, val, size);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		return null;
	}
	def runtime_ARRAY_COPY(instance: Instance, unused1: u32, unused2: u32) -> Throwable {
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var src = HeapArray.!(curStack.popObject());
		var dst_offset = curStack.popu();
		var dst = HeapArray.!(curStack.popObject());
		var result = Runtime.ARRAY_COPY(dst, dst_offset, src, src_offset, size);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		return null;
	}
	def runtime_ARRAY_INIT_DATA(instance: Instance, index: u32, dindex: u32) -> Throwable {
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var dst_offset = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		var result = Runtime.ARRAY_INIT_DATA(instance, index, dindex, obj, dst_offset, src_offset, size);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		return null;
	}
	def runtime_ARRAY_INIT_ELEM(instance: Instance, index: u32, eindex: u32) -> Throwable {
		var size = curStack.popu();
		var src_offset = curStack.popu();
		var dst_offset = curStack.popu();
		var obj = HeapArray.!(curStack.popObject());
		var result = Runtime.ARRAY_INIT_ELEM(instance, index, eindex, obj, dst_offset, src_offset, size);
		if (!result.ok()) return doTrap(result.reason, CiRuntime.callerSp());
		return null;
	}
	def runtime_doCast(instance: Instance, nullable: byte, htcode: int) -> bool {
		var val = curStack.peekRef();
		return Execute.doCast(instance, (nullable & 2) != 0, htcode, val);
	}
}

