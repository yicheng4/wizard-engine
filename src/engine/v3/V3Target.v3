// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// {Target} is the static configuration of target-specific subsystems such as the implementation of
// memories and the execution strategy. The {V3} target (this file) provides a pure-Virgil
// interpreter-only mode suitable (but slow) for any compilation target.
component Target {
	def limit_memory_pages = 30000u;
	def newMemory = V3Memory.new;
	def newWasmStack = V3Interpreter.new;
	var unused = ExecuteOptions.registerDefaultMode("v3-int", V3InterpreterOnlyStrategy.new(), "slow interpreter only");

	def forceGC() { } // nop
	def rdtsc() -> u64 { return u64.view(System.ticksNs()); }
	def pregenIntoFile(filename: string) -> ErrorBuilder {
		return ErrorBuilder.new().puts("interpreter generator: nothing to generate for this target");
	}
}

// A one-element cache for recycling storage of Wasm stacks (interpreters).
var cached_stack: V3Interpreter;

// A simple tiering strategy consisting of only the V3 interpreter.
class V3InterpreterOnlyStrategy extends ExecutionStrategy {
	def call(func: Function, args: Range<Value>) -> Result {
		var stack = cached_stack;
		cached_stack = null;
		if (stack == null) stack = V3Interpreter.new();
		var r = stack.reset(func)
			.bind(args)
			.resume(null);
		match (r) {
			Value(vals) => {
				if (cached_stack == null) cached_stack = stack;
				return Result.Value(Ranges.dup(vals));
			}
			Throw(thrown) => {
				if (cached_stack == null) cached_stack = stack;
				return Result.Throw(thrown);
			}
			Suspend(stack, tag, vals) => {
				return Result.Throw(Trap.new(TrapReason.INVALID_SUSPEND, null, null));
			}
		}
	}
	def reset() {
		if (cached_stack != null) cached_stack.clear();
	}
}

type TargetOsrInfo #unboxed { }
type TargetCode #unboxed { }
type TargetModule #unboxed { }
type TargetFrame(frame: V3Frame) #unboxed {
	def getFrameAccessor() -> FrameAccessor {
		if (frame.accessor == null) frame.accessor = V3FrameAccessor.new(frame);
		return frame.accessor;
	}
}
